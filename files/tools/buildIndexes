#!/usr/bin/env python

import json, os, re

toca = json.loads(
    os.getenv( 'TOC_ATTRS', '{ "maxdepth": "3", "hidden": "" }' )
)

os.chdir( os.getenv( 'TO_DIR', '/data' ) )

tree     = {}
maxLevel = 0
for path, dirs, files in os.walk( './' ):
    path  = path[2:]
    split = list( filter( None, path.split( os.path.sep )))
    level = len( split )
    tree[ path ] = { "split": split, "level": level, "dirs": dirs, "files": files }
    if level > maxLevel:
        maxLevel = level

named = {}
if '.named' in toca:
    named = toca.pop( '.named' )

leveled = {}
if '.leveled' in toca:
    lpat = re.compile( '([0-9]+)(\.\.)?([0-9]+)?' )
    for l, attrs in toca[ '.leveled' ].items():
        match = lpat.match( l )
        # error â€“ no correct level descriptor
        if match.group( 1 ) == None:
            pass
        # single level since no dots
        elif match.group( 2 ) == None:
            leveled[ str( l ) ] = attrs
        # no second numeric group but dots, so all from named level
        elif match.group( 3 ) == None:
            l = int( match.group( 1 ) )
            while l <= maxLevel:
                leveled[ str( l ) ] = attrs
                l = l + 1
        # only a defined range of levels
        else:
            l = int( match.group( 1 ) )
            m = int( match.group( 3 ) )
            while l <= maxLevel and l <= m:
                leveled[ str( l ) ] = attrs
                l = l + 1
    del toca[ '.leveled' ]

fileName = 'index.rst'
for path, i in tree.items():
    # get the relevant attributes
    if path in named:
        attrs = named[ path ]
    elif str( i[ 'level' ] ) in leveled:
        attrs = leveled[ str( i[ 'level' ] ) ]
    else:
        attrs = toca
    # create TOC
    toc = []
    toc.append( '.. toctree::' )
    for k, v in attrs.items():
        if k != '.prepend':
            s = '   :' + k + ':'
            if v != '':
                s += ' ' + v
            toc.append( s )
    toc.append( '' )
    tocEntries = []
    for d in i[ 'dirs' ]:
        tocEntries.append( '   ' + os.path.sep.join( [ d, fileName[0:-4] ] ) )
    for f in i[ 'files' ]:
        if f[-4:].lower() == '.rst' and f.lower() != fileName:
            tocEntries.append( '   ' + f[0:-4] )
    tocEntries.sort()
    toc += tocEntries
    # create index if needed
    indexPath = os.path.sep.join( list( filter( None, [ path, fileName ] ) ) )
    if fileName not in i[ 'files' ]:
        with open( indexPath, 'w'):
            pass
    with open( indexPath, 'r' ) as file:
        lines = file.read().splitlines()
    # add TOC to lines
    if '.prepend' in attrs:
        if len( lines ) > 0 and lines[ 0 ] != '':
            toc.append( '' )
        toc = toc + lines
    else:
        if len( lines ) > 0 and lines[ -1 ] != '':
            toc = [ '' ] + toc
        toc = lines + toc
    # write out TOC
    if toc[ -1 ] != '':
        toc.append( '' )
    with open( indexPath, 'w' ) as index:
        index.write( '\n'.join( toc ) )
